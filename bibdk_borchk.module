<?php

/**
 * Implements hook_ting_client_webservice (@see ting_client.module)
 * */
function bibdk_borchk_ting_client_webservice() {
  $ret = array();
  $ret['borchk']['class'] = 'bibdk_borchk';
  $ret['borchk']['url'] = 'bibdk_borchk_url';
  return $ret;
}

function bibdk_borchk_netpunkt_request($userid, $agency,$outputType = 'json', $serviceRequester = 'netpunkt'){
  // this is the real request

  global $user;

  $params = array(
    'action' => 'borrowerCheckRequest',
    'userId' => $userid,
    'serviceRequester' => $serviceRequester,
    'libraryCode' => $agency,
    'outputType' => $outputType,
  );

  $client = new ting_client_class();
  $response = $client->do_request('borchk',$params);

  if (class_exists('DBC\AT\AuditTrail')) {
    _bibdk_borchk_call_audittrail($userid, $agency);
  }

  return $response;
}

/**
 * do a request
 * */
function bibdk_borchk_request($userId, $userPincode, $libraryCode, $outputType = 'json', $serviceRequester = NULL) {
  if(empty($serviceRequester)){
    $serviceRequester = variable_get('bibdk_borchk_servicerequester');
  }

  $params = array(
    'action' => 'borrowerCheckRequest',
    'userId' => $userId,
    'userPincode' => $userPincode,
    'serviceRequester' => $serviceRequester,
    'libraryCode' => $libraryCode,
    'outputType' => $outputType,
  );


  // this is the real request
  $client = new ting_client_class();
  $response = $client->do_request('borchk', $params);

  if (class_exists('DBC\AT\AuditTrail')) {
    _bibdk_borchk_call_audittrail($userId, $libraryCode);
  }

  return $response;
}

/**
 * Implements hook_form_FORM_ID_alter (ting_client_admin_webservices_settings)
 * add 2 fields to webservice client settings
 * @url to borchk
 * @servicerequester
 * */
function bibdk_borchk_form_ting_client_admin_webservices_settings_alter(&$form, &$form_state) {
  // don't start by defining the fieldset as an array. This way other modules can extend the fieldset.
  $form['borchk']['#type'] = 'fieldset';
  $form['borchk']['#title'] = t('borchk settings');
  $form['borchk']['#description'] = t('Client for borchk, a service for verifiying users against library endpoints.');
  $form['borchk']['#collapsible'] = TRUE;
  $form['borchk']['#collapsed'] = TRUE;
  $form['borchk']['#tree'] = FALSE;

  $form['borchk']['bibdk_borchk_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Borchk URL'),
    '#description' => t('URL to borchk e.g.  http://borchk.addi.dk/2.3/'),
    '#required' => TRUE,
    '#default_value' => variable_get('bibdk_borchk_url', FALSE),
  );
  $form['borchk']['bibdk_borchk_servicerequester'] = array(
    '#type' => 'textfield',
    '#title' => t('Service requester parameter for borchk'),
    '#description' => t('the default service requester (if no other given) e.g. bibliotek.dk'),
    '#required' => TRUE,
    '#default_value' => variable_get('bibdk_borchk_servicerequester', FALSE),
  );
}

/**
 * Implements hook_how_r_u()
 * @return Array
 */
function bibdk_borchk_how_r_u() {
  return array('Borchk' => variable_get('bibdk_borchk_url'));
}

/**
 * @param $userid
 * @param $agency
 */
function _bibdk_borchk_call_audittrail($userid, $agency) {

  if (isset($_SESSION['heimdal']) && !empty($_SESSION['heimdal'])) {
    // Token can either be Heimdals access_token or the agency from the Netpunkt Triple. The Netpunkt triple is only
    // used by DBC.
    $token = (isset($_SESSION['heimdal']['access_token']) && !empty($_SESSION['heimdal']['access_token'])) ?
      $_SESSION['heimdal']['access_token'] : "DBC-" . $agency;
    $ipAddress = ip_address();
    // Audit_response is either requestStatus, faultstring or empty string. In that order.
    $audit_response = (isset($response->borrowerCheckRespoonse->requestStatus->{'$'}) ?
      $response->borrowerCheckRespoonse->requestStatus->{'$'} : (isset($result->faultstring->{'$'}) ? $result->faultstring->{'$'} : '')
    );
    try {
      DBC\AT\AuditTrail::log(
        $token,
        ((!is_array($ipAddress)) ? [$ipAddress] : $ipAddress),
        'Netpunkt',
        'read',
        $userid,
        [
          'agency' => $agency,
          'borchkresponse' => $audit_response
        ]
      );
    } catch (TypeError $e) {
      watchdog('bibdk_borchk', $e->getMessage(), [], WATCHDOG_ERROR);
    } catch (Exception $e) {
      watchdog('bibdk_borchk', $e->getMessage(), [], WATCHDOG_ERROR);
    }
  }

}
